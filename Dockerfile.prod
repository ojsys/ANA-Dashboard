# Stage 1: Build environment
FROM python:3.12-slim AS builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential \
        python3-dev \
        curl \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry via pip
RUN pip install poetry

# Set working directory in the builder stage
WORKDIR /app

# Copy only the poetry.lock/pyproject.toml to leverage Docker cache
COPY pyproject.toml poetry.lock /app/

# Install dependencies
RUN poetry config virtualenvs.create false \
    && poetry install --no-dev --no-interaction --no-ansi


# Copy the Django project into the container
#COPY . /app

# Expose the port the app runs on
#EXPOSE 8000

# Collect static files
#RUN python manage.py collectstatic --noinput

# Run Gunicorn for production
#CMD ["gunicorn", "--bind", "0.0.0.0:8000", "anadash.wsgi:application"]

# Stage 2: Setup nginx and copy application code
FROM nginx:alpine AS production

# Copy nginx configuration
COPY ./nginx/nginx.conf /etc/nginx/nginx.conf

# Copy static files from builder stage
COPY --from=builder /app /app

# Set working directory
WORKDIR /app

RUN ls -lt
# Expose the port the app runs on
EXPOSE 8000

# Run Gunicorn for production
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "anadash.wsgi:application"]
